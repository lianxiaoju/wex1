<template>
  <view class='reply-box'>
    <view class="reply-head">
      <view class="info">
        <view class="user">
          <image class="user-head" src="{{comment.avatarFileKeyUrl}}" />
          <view class="user-info">
            <text>{{comment.nickname}}</text>
            <text class="time">{{comment.createTime}}</text>
          </view>
        </view>
        <view class="user-like" @tap="commentLiked" data-sid="{{comment.sid}}">
          <image wx:if="{{comment.isLiked === 'false'}}" src="../images/wz.png" />
          <image wx:if="{{comment.isLiked === 'true'}}" src="../images/zan.png" />
          <text>{{comment.likeCount}}</text>
        </view>
      </view>
      <view class="reply-con">
        <text>{{comment.content}}</text>
      </view>
    </view>
    <view class="reply-body" @tap.stop="blurFn">
      <view class="reply-item" wx:for="{{replyList}}" wx:key="{{index}}">
        <view class="info">
          <view class="user">
            <image class="user-head" src="{{item.avatarFileKeyUrl}}" />
            <view class="user-info">
              <text>{{item.nickname}}</text>
              <text class="time">{{item.createTime}}</text>
            </view>
          </view>
          <view class="user-like" @tap.stop="replyLiked" data-sid="{{item.sid}}">
            <image wx:if="{{!item.isLiked}}" src="../images/wz.png" />
            <image wx:if="{{item.isLiked}}" src="../images/zan.png" />
            <text>{{item.likeCount}}</text>
          </view>
        </view>
        <view class="reply-con">
          <text wx:if="{{item.toReplySid === ''}}">{{item.content}}</text>
          <text wx:if="{{item.toReplySid !== ''}}">回复了<text class="usernickname">@{{item.toUserNickname}}</text>{{item.content}}</text>
          <text @tap.stop="replyFn" class="reply-btn" data-sid="{{item.sid}}">回复</text>
        </view>
        <view class="comment-ipt" wx:if="{{!isClass}}" @tap.stop="focusFn">
          <text>So，你怎么看？一起来评论吧</text>
        </view>
        <view class="comment-ipt" wx:if="{{isClass}}" @tap.stop="focusFn">
          <input confirm-hold @blur="blurFn" @input="iptVal" value="{{ipt}}" />
          <button @tap.stop="sendFn" data-sid="{{item.sid}}">发布</button>
        </view>
      </view>
    </view>
    <loading/>
    <toast/>
    <dialog/>
  </view>
</template>

<script>
  import wepy from 'wepy';
  import Service from '../common/services';
  import Utils from '../common/util'
  import UILoading from '../components/ui-loading';
  import UIToast from '../components/ui-toast';
  import UIDialog from '../components/ui-dialog';
  export default class Index extends wepy.page {
    config = {
      navigationBarBackgroundColor: '#0b1016',
    }
    components = {
      'loading': UILoading,
      'toast': UIToast,
      'dialog': UIDialog
    }
    data = {
      replyList: [],
      sid: '',
      ipt: '',
      isClass: false,
      isReply: false,
      comment: {}
    }
    onLoad(options) {
      this.comment = options
      this.sid = options.sid
      this.$apply()
      this._getReplyList(this.sid)
    }
    methods = {
      iptVal(e) {
        this.ipt = e.detail.value;
        this.$apply()
      },
      replyFn() {
        this.isClass = true
        this.isReply = true
        this.$apply()
      },
      focusFn() {
        this.isClass = true
        this.$apply()
      },
      blurFn() {
        this.isClass = false
        this.$apply()
      },
      commentLiked(e) {
        const sid = e.currentTarget.dataset.sid;
        if (this.comment.isLiked === 'false') {
          Service.$info.commentLiked({
            comment_sid: sid
          }).then(() => {
            this.comment.isLiked = 'true'
            this.comment.likeCount = this.comment.likeCount * 1 + 1
            this.$apply()
          })
        } else {
          Service.$info.commentUnlLiked({
            comment_sid: sid
          }).then(() => {
            this.comment.isLiked = 'false'
            this.comment.likeCount = (this.comment.likeCount * 1 - 1 < 0) ? 0 : (this.comment.likeCount * 1 - 1)
            this.$apply()
          })
        }
      },
      replyLiked(e) {
        const sid = e.currentTarget.dataset.sid;
        this.replyList.forEach((item, index) => {
          if (item.sid === sid) {
            if (!item.isLiked) {
              Service.$info.replyLiked({
                reply_sid: sid
              }).then(() => {
                item.isLiked = true
                item.likeCount = item.likeCount * 1 + 1
                this.$apply()
              })
            } else {
              Service.$info.replyUnlLiked({
                reply_sid: sid
              }).then(() => {
                item.isLiked = false
                item.likeCount = (item.likeCount * 1 - 1 < 0) ? 0 : (item.likeCount * 1 - 1)
                this.$apply()
              })
            }
          }
        })
      },
      sendFn(e) {
        const sid = e.currentTarget.dataset.sid;
        if (this.isReply) {
          Service.$info.replyComment({
            comment_sid: this.sid,
            content: this.ipt,
            to_reply_sid: sid
          }).then(res => {
            this.ipt = ''
            this.isClass = false
            this.isReply = false
            this.$apply()
            this._getReplyList(this.sid)
          })
        } else {
          Service.$info.replyComment({
            comment_sid: this.sid,
            content: this.ipt,
            to_reply_sid: ''
          }).then(res => {
            this.ipt = ''
            this.isClass = false
            this.$apply()
            this._getReplyList(this.sid)
          })
        }
      }
    }
    onPullDownRefresh() {
      this.$invoke('loading', 'show', 'Loading');
      this._getReplyList(this.sid).then(res => {
        wx.stopPullDownRefresh();
      })
    }
    _getReplyList(sid) {
      return Service.$info.getReplyList({
        comment_sid: sid
      }).then(data => {
        if (!data.data.items || data.data.items.length === 0) {
          return;
        }
        data.data.items.forEach((item, index) => {
          item.createTime = Utils.$formatDate.formatZHDate(item.createTime);
          if (item.isLiked) {
            item.likeCount = item.likeCount * 1 + 1
          }
          Utils.$file.getUrl({
            sid: item.avatarBucketSid,
            fileKey: item.avatarFileKey
          }).then(url => {
            item.avatarFileKeyUrl = url
            this.$apply()
          })
        })
        this.replyList = data.data.items
        this.$apply()
        this.$invoke('loading', 'hide');
        return Promise.resolve(this.replyList);
      })
    }
  }
</script>

<style lang='less'>
  .reply-box {
    background: #101720;
    padding-bottom: 96rpx;
    .reply-head {
      padding: 16rpx 40rpx 52rpx;
      background: #0b1016;
      .info {
        display: flex;
        align-items: center;
        justify-content: space-between;
        .user {
          display: flex;
          .user-head {
            width: 68rpx;
            height: 68rpx;
            border-radius: 50%;
          }
          .user-info {
            display: flex;
            flex-direction: column;
            color: rgba(179, 179, 193, .4);
            font-size: 26rpx;
            margin-left: 20rpx;
            .time {
              font-size: 22rpx;
              color: #50555a;
              margin-top: 12rpx;
            }
          }
        }
        .user-like {
          display: flex;
          align-items: center;
          color: rgba(255, 255, 255, .4);
          font-size: 26rpx;
          image {
            width: 44rpx;
            height: 44rpx;
            margin-right: 10rpx;
          }
        }
      }
      .reply-con {
        color: #b3b3c1;
        font-size: 30rpx;
        margin-top: 24rpx;
        margin-left: 88rpx;
      }
    }
    .reply-body {
      padding: 0 40rpx;
      .reply-item {
        border-bottom: 1px solid #080b10;
        padding: 32rpx 0;
        .info {
          display: flex;
          align-items: center;
          justify-content: space-between;
          .user {
            display: flex;
            .user-head {
              width: 60rpx;
              height: 60rpx;
              border-radius: 50%;
            }
            .user-info {
              display: flex;
              flex-direction: column;
              color: rgba(179, 179, 193, .4);
              font-size: 26rpx;
              margin-left: 20rpx;
              .time {
                font-size: 22rpx;
                color: #50555a;
                margin-top: 4rpx;
              }
            }
          }
          .user-like {
            display: flex;
            align-items: center;
            color: rgba(255, 255, 255, .4);
            font-size: 26rpx;
            image {
              width: 44rpx;
              height: 44rpx;
              margin-right: 10rpx;
            }
          }
        }
        .reply-con {
          display: flex;
          flex-direction: column;
          color: #b3b3c1;
          font-size: 26rpx;
          margin-top: 20rpx;
          margin-left: 80rpx;
          .reply-btn {
            margin-top: 32rpx;
            color: rgba(255, 255, 255, .4);
          }
          .usernickname {
            color: rgba(179, 179, 193, .4);
            margin-right: 10rpx;
          }
        }
      }
    }
    .comment-ipt {
      width: 100%;
      padding: 16rpx 0;
      background: #1a232f;
      display: flex;
      justify-content: center;
      align-items: center;
      position: fixed;
      bottom: 0;
      left: 0;
      text {
        width: 686rpx;
        height: 64rpx;
        line-height: 64rpx;
        padding-left: 24rpx;
        font-size: 26rpx;
        color: rgba(255, 255, 255, .4);
        background: #101720;
        border-radius: 8rpx;
      }
      input {
        width: 558rpx;
        background: #ffffff;
        color: #000000;
        margin-left: 32rpx;
        min-height: 64rpx;
        white-space: wrap;
        font-size: 26rpx;
        border-radius: 8rpx;
        white-space: wrap;
        padding-left: 24rpx;
        margin-bottom: 20rpx;
      }
      button {
        margin-bottom: 20rpx;
        width: 96rpx;
        height: 60rpx;
        line-height: 60rpx;
        background: rgba(235, 68, 90, 1);
        border-radius: 8rpx;
        margin-left: 32rpx;
        font-size: 26rpx;
        color: #ffffff;
        font-weight:400;
        padding: 0;
      }
    }
  }
</style>