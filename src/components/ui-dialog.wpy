<style lang="less">
    .ui-dialog-mask {
      position: fixed;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, .4);
      z-index: 9998;
    }

    .ui-dialog-wrapper {
      position: absolute;
      margin: 0 auto;
      top: 50%;
      left: 50%;
      max-width: 90%;
      width: 600rpx;
      font-size: 14px;
      word-break: break-all;
      border: none;
      border-radius: 5px;
      background-color: #fff;
      overflow: hidden;
      transform: translate(-50%, -55%);
      z-index: 9999;

        .ui-dialog-header {
            color: #333;
            padding: 32rpx 48rpx 0;

            .ui-dialog-title {
                font-weight: bold;
                text-align: center;
                text-overflow: ellipsis;
                white-space: nowrap;
                overflow: hidden;
            }
        }

        .ui-dialog-body {
            color: #999;
            padding: 32rpx 48rpx 40rpx;

            .ui-dialog-content {
                text-align: center;
            }
        }

        .ui-dialog-footer {
            display: flex;
            align-items: center;
            justify-content: center;
            color: #666;
            border-top: 1px solid #f1f1f1;
            overflow: hidden;

            .ui-dialog-btn-wrapper {
                position: relative;
                flex: 1;
                padding: 20rpx 10rpx;
                text-align: center;
                text-overflow: ellipsis;
                white-space: nowrap;
                overflow: hidden;

                &::after {
                    content: '';
                    display: block;
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 1px;
                    height: 100%;
                    background-color: #f1f1f1;
                }

                &:last-child::after {
                    content: none;
                }
            }

            .ui-dialog-btn {
                width: 100%;
                height: 100%;
                overflow: hidden;
            }

            .ui-dialog-btn-primary {
                color: #1fb8ca;
            }
        }
    }
</style>

<template>
	<view class="ui-dialog-mask" hidden="{{!visible}}" @tap.stop="noop">
        <view class="ui-dialog-wrapper">
            <view class="ui-dialog-header" wx:if="{{title}}">
                <view class="ui-dialog-title">{{title}}</view>
            </view>
            <view class="ui-dialog-body" style="{{cssText}}">
                <text class="ui-dialog-content">{{content}}</text>
            </view>
            <view class="ui-dialog-footer">
                <repeat for="{{buttons}}">
                    <view class="ui-dialog-btn-wrapper" data-index="{{index}}" @tap.stop="ontapButton">
                        <view class="ui-dialog-btn {{item.primary ? 'ui-dialog-btn-primary' : ''}}">{{item.text}}</view>
                    </view>
                </repeat>
            </view>
        </view>
	</view>
</template>

<script>
    import wepy from 'wepy';

    export default class UIDialog extends wepy.component {
        constructor() {
            super();
            this.data = this._defaultConfig();
        }

        _defaultConfig() {
            return {
                visible: false,
                title: '',
                content: '',
                buttons: [],
                textAlign: '',
                vertical: false,
                success: () => {}
            };
        }

        data = {
        };

        computed = {
            cssText() {
                const _this = this;
                if ('left' === _this.textAlign) {
                    return 'text-align: left;';
                } else if ('right' === _this.textAlign) {
                    return 'text-align: right;';
                } else {
                    return 'text-align: center;';
                }
            }
        };

        methods = {
            noop() {
                // DoNothing
            },

            ontapButton(e) {
                const _this = this;
                const callback = _this.success;
                if ('function' === typeof callback) {
                    _this.close();
                    callback({ index: +e.currentTarget.dataset.index});
                }
            }
        };

        open(options) {
            const _this = this;

            _this.close();
            let conf = _this._defaultConfig();
            if ('string' === typeof options) {
                conf = Object.assign(conf, {
                    content: String(options)
                });
            } else {
                conf = Object.assign(conf, options);
            }

            _this.visible = true;
            _this.title = conf.title;
            _this.content = conf.content;
            _this.buttons = conf.buttons;
            _this.textAlign = conf.textAlign;
            _this.vertical = conf.vertical;
            _this.success = conf.success;

            setTimeout(() => _this.$apply(), 1);
        }

        close() {
            const _this = this;

            const conf = _this._defaultConfig();
            for (let prop in conf) {
                _this[prop] = conf[prop];
            }
            _this.$apply();

            if (_this.timer) {
                clearTimeout(_this.timer);
                _this.timer = null;
            }
        }

        /**
         * 显示提示对话框
         * @param {Object} options 配置项
         * @param {String} options.title 提示标题
         * @param {String} options.content 提示文本
         * @param {String} options.confirmText 确定按钮的文字，默认为"好的"
         */
        alert(options = {}) {
            const _defaultConfig = () => {
                return {
                    title: '',
                    content: '',
                    confirmText: '好的'
                };
            };
            let conf = _defaultConfig();

            if ('string' === typeof options) {
                conf = Object.assign(conf, {
                    content: String(options) || _defaultConfig().content
                });
            } else {
                conf = Object.assign(conf, options);
            }

            return this.open(Object.assign({
                buttons: [
                    {
                        text: conf.confirmText || _defaultConfig().confirmText,
                        primary: true
                    }
                ]
            }, conf));
        }

        /**
         * 显示确认对话框
         * @param {Object} options 配置项
         * @param {String} options.title 提示标题
         * @param {String} options.content 提示文本
         * @param {String} options.confirmText 确定按钮的文字，默认为"好的"
         * @param {String} options.cancelText 取消按钮的文字，默认为"取消"
         */
        confirm(options = {}) {
            const _defaultConfig = () => {
                return {
                    title: '',
                    content: '',
                    confirmText: '好的',
                    cancelText: '取消'
                };
            };
            let conf = _defaultConfig();

            if ('string' === typeof options) {
                conf = Object.assign(conf, {
                    content: String(options) || _defaultConfig().content
                });
            } else {
                conf = Object.assign(conf, options);
            }

            return this.open(Object.assign({
                buttons: [
                    {
                        text: options.cancelText || _defaultConfig().cancelText,
                        primary: false
                    },
                    {
                        text: options.confirmText || _defaultConfig().confirmText,
                        primary: true
                    }
                ]
            }, conf));
        }
    }
</script>
