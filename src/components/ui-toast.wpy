<style lang="less">
  .ui-toast-mask {
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 9990;
    pointer-events: none;
  }
  .ui-toast {
    position: absolute;
    margin: 0 auto;
    padding: 20rpx 40rpx;
    top: 50%;
    left: 50%;
    max-width: 80%;
    font-size: 14px;
    text-align: center;
    word-break: break-all;
    line-height: 18px;
    color: #fff;
    border: none;
    border-radius: 5px;
    background-color: rgba(0, 0, 0, 0.75);
    overflow: hidden;
    z-index: 9991;
    transform: translate(-50%, -50%);
    animation: ani-toast 2s ease-in-out;
  }
  @keyframes ani-toast {
    0% {
      opacity: 0;
      transform: translate(-50%, -50%) scale(1.1);
    }
    10% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
    100% {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
  }
</style>

<template lang="wxml">
  <view class="ui-toast-mask" hidden="{{!visible}}" @touchstart.stop="noop">
    <view class="ui-toast" style="{{cssText}}">{{content}}</view>
  </view>
</template>

<script>
  import wepy from 'wepy';
  export default class UIToast extends wepy.component {
    constructor() {
      super();
      this.data = this._defaultConfig();
    }
    _defaultConfig() {
      return {
        visible: false,
        position: '',
        content: '',
        duration: 2000
      };
    }
    data = {
    };
    computed = {
      cssText() {
        const _this = this;
        const styles = {};
        if ('top' === _this.position) {
          styles['top'] = '20rpx';
          styles['margin-top'] = '40rpx';
        } else if ('center' === _this.position) {
          styles['top'] = '50%';
        } else {
          styles['top'] = 'initial';
          styles['bottom'] = '20rpx';
          styles['margin-bottom'] = '20rpx';
        }
        return Object.keys(styles).map(key => (key + ':' + styles[key])).join(';');
      }
    };
    methods = {
      noop(e) {
        // DoNothing
      }
    };
    show(options) {
      const _this = this;
      // _this.hide();
      let conf = _this._defaultConfig();
      if ('string' === typeof options) {
        conf = Object.assign(conf, {
          content: String(options)
        });
      } else {
        conf = Object.assign(conf, options);
      }
      _this.visible = true;
      _this.content = conf.content;
      _this.position = conf.position;
      _this.duration = (+conf.duration > 0) ? +conf.duration : _this._defaultConfig().duration;
      setTimeout(() => _this.$apply(), 1);
      _this.timer = setTimeout(() => _this.hide(), _this.duration);
    }
    hide() {
      const _this = this;
      const conf = _this._defaultConfig();
      for (let prop in conf) {
        _this[prop] = conf[prop];
      }
      _this.$apply();
      if (_this.timer) {
        clearTimeout(_this.timer);
        _this.timer = null;
      }
    }
  }
</script>